import * as b from 'bobril';
import elem, { IBaseData } from './element';
import { createDictionary, IDictionary, toLowerWithDashes } from './bobrilHelpers';

export enum GlyphIconType {
    asterisk,
    plus,
    euro,
    eur,
    minus,
    cloud,
    envelope,
    pencil,
    glass,
    music,
    search,
    heart,
    star,
    starEmpty,
    user,
    film,
    thLarge,
    th,
    thList,
    ok,
    remove,
    zoomIn,
    zoomOut,
    off,
    signal,
    cog,
    trash,
    home,
    file,
    time,
    road,
    downloadAlt,
    download,
    upload,
    inbox,
    playCircle,
    repeat,
    refresh,
    listAlt,
    lock,
    flag,
    headphones,
    volumeOff,
    volumeDown,
    volumeUp,
    qrcode,
    barcode,
    tag,
    tags,
    book,
    bookmark,
    print,
    camera,
    font,
    bold,
    italic,
    textHeight,
    textWidth,
    alignLeft,
    alignCenter,
    alignRight,
    alignJustify,
    list,
    indentLeft,
    indentRight,
    facetimeVideo,
    picture,
    mapMarker,
    adjust,
    tint,
    edit,
    share,
    check,
    move,
    stepBackward,
    fastBackward,
    backward,
    play,
    pause,
    stop,
    forward,
    fastForward,
    stepForward,
    eject,
    chevronLeft,
    chevronRight,
    plusSign,
    minusSign,
    removeSign,
    okSign,
    questionSign,
    infoSign,
    screenshot,
    removeCircle,
    okCircle,
    banCircle,
    arrowLeft,
    arrowRight,
    arrowUp,
    arrowDown,
    shareAlt,
    resizeFull,
    resizeSmall,
    exclamationSign,
    gift,
    leaf,
    fire,
    eyeOpen,
    eyeClose,
    warningSign,
    plane,
    calendar,
    random,
    comment,
    magnet,
    chevronUp,
    chevronDown,
    retweet,
    shoppingcart,
    folderClose,
    folderOpen,
    resizeVertical,
    resizeHorizontal,
    hdd,
    bullhorn,
    bell,
    certificate,
    thumbsUp,
    thumbsDown,
    handRight,
    handUeft,
    handUp,
    handDown,
    circleArrowRight,
    circleArrowLEft,
    circleArrowUp,
    circleArrowDown,
    globe,
    wrench,
    tasks,
    filter,
    briefcase,
    fullscreen,
    dashboard,
    paperclip,
    heartEmpty,
    link,
    phone,
    pushpin,
    usd,
    gbp,
    sort,
    sortByAlphabet,
    sortByAlphabetAlt,
    sortByOrder,
    sortByOrderAlt,
    sortByAttributes,
    sortByAttributesAlt,
    unchecked,
    expand,
    collapseDown,
    collapseUp,
    logIn,
    flash,
    logOut,
    newWindow,
    record,
    save,
    open,
    saved,
    import,
    export,
    send,
    floppyDisk,
    floppySaved,
    floppyRemove,
    floppySave,
    floppyOpen,
    creditCard,
    transfer,
    cutlery,
    header,
    compressed,
    earphone,
    phoneAlt,
    tower,
    stats,
    sdVideo,
    hdVideo,
    subtitles,
    soundStereo,
    soundDolby,
    sound51,
    sound61,
    sound71,
    copyrightMark,
    registrationMark,
    cloudDownload,
    cloudUpload,
    treeConifer,
    treeDeciduous,
    cd,
    saveFile,
    openFile,
    levelUp,
    copy,
    paste,
    alert,
    equalizer,
    king,
    queen,
    pawn,
    bishop,
    knight,
    babyFormula,
    tent,
    blackboard,
    bed,
    apple,
    erase,
    hourglass,
    lamp,
    duplicate,
    piggyBank,
    scissors,
    bitcoin,
    btc,
    xbt,
    yen,
    jpy,
    ruble,
    rub,
    scale,
    iceLolly,
    iceLollyTasted,
    education,
    optionHorizontal,
    optionVertical,
    menuHamburger,
    modalWindow,
    oil,
    grain,
    sunglasses,
    textDize,
    textColor,
    textBackground,
    objectAlignTop,
    objectAlignBottom,
    objectAlignHorizontal,
    objectAlignLeft,
    objectAlignVertical,
    objectAlignRight,
    triangleRight,
    triangleLeft,
    triangleBottom,
    triangleTop,
    console,
    superscript,
    subscript,
    menuLeft,
    menuRight,
    menuDown,
    menuUp,
}

export const glyphIconStyles = {
    glyphicon: b.styleDef('glyphicon'),
    formControlFeedback: b.styleDef('form-control-feedback')
};

export const glyphIconTypeStyles = generateStyles();

export interface IGlyphiconData extends IBaseData {
    icon: GlyphIconType;
    formControlFeedback?: boolean;
}

interface ICtx extends b.IBobrilCtx {
    data: IGlyphiconData;
}

export let glyphicon = b.createDerivedComponent<IGlyphiconData>(elem, {
    id: 'bobrilstrap-glyphicon',
    render(ctx: ICtx, me: b.IBobrilNode) {
        me.tag = 'span';
        me.attrs['aria-hidden'] = true;
        b.style(me, glyphIconStyles.glyphicon);
        b.style(me, glyphIconTypeStyles(ctx.data.icon));
        b.style(me, !!ctx.data.formControlFeedback && glyphIconStyles.formControlFeedback);
    }
});

export default glyphicon;

function generateStyles(): IDictionary<GlyphIconType, b.IBobrilStyle> {
    let result = createDictionary<GlyphIconType, b.IBobrilStyle>();
    Object.keys(GlyphIconType).forEach(key => {
        let castedValue = parseInt(key, 10);
        if (!isNaN(castedValue)) {
            result(castedValue, b.styleDef(`glyphicon-${toLowerWithDashes(GlyphIconType[castedValue])}`));
        }
    });

    return result;
}
